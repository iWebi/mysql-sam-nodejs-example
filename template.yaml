AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  mysql-sam-nodejs-example

  Sample SAM Template for mysql-sam-nodejs-example

Globals:
  Function:
    CodeUri: app/
    Timeout: 3
    MemorySize: 128
    Runtime: nodejs20.x
    Architectures:
      - x86_64
    VpcConfig:
      SecurityGroupIds:
        - sg-c8c5c9a3
      # Should we read subnet ids from aws secret manager?
      SubnetIds:
        - subnet-09a0c761
        - subnet-d94d91a3
        - subnet-cc828e81
    Environment:
      Variables:
        DB_CREDENTIALS_SECRET_NAME: nodejs-example/mysql
        LOG_LEVEL: INFO

    Tracing: Active
    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true
Resources:
  AddBookFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: functions/books.addBookHandler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:nodejs-example/mysql*
      Events:
        AddBook:
          Type: Api
          Properties:
            Path: /books
            Method: post
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        # Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - functions/books.ts
  GetBookFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: functions/books.getBookHandler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:nodejs-example/mysql*
      Events:
        AddBook:
          Type: Api
          Properties:
            Path: /books/{id}
            Method: get
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        # Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - functions/books.ts
  DeleteBookFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: functions/books.deleteBookHandler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:nodejs-example/mysql*
      Events:
        AddBook:
          Type: Api
          Properties:
            Path: /books/{id}
            Method: delete
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        # Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - functions/books.ts

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: "true"
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  BooksApi:
    Description: API Gateway endpoint URL for Prod stage for Books CRUD functions
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  AddBookFunction:
    Description: Add Book Lambda Function ARN
    Value: !GetAtt AddBookFunction.Arn
  AddBookFunctionIamRole:
    Description: Implicit IAM Role created for Add Book function
    Value: !GetAtt AddBookFunctionRole.Arn
